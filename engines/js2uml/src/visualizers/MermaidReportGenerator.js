import { MermaidVisualizer } from './MermaidVisualizer.js';

export class MermaidReportGenerator {
    static generate(analysis, title = 'Architecture Analysis') {
        const { classes, relationships, insights } = analysis;
        const mermaid = MermaidVisualizer.generate(analysis);
        
        let markdown = `# üèóÔ∏è ${title}\n\n`;
        markdown += `*Generated by Insight Suite JS2UML on ${new Date().toLocaleDateString()}*\n\n`;
        
        // Quick Stats
        markdown += `## üìä Quick Stats\n\n`;
        markdown += `| Metric | Value |\n`;
        markdown += `|--------|-------|\n`;
        markdown += `| Classes | ${insights.totalClasses} |\n`;
        markdown += `| Methods | ${insights.totalMethods} |\n`;
        markdown += `| Quality Score | ${insights.qualityScore}% |\n`;
        markdown += `| Relationships | ${relationships.length} |\n\n`;
        
        // Mermaid Diagram
        markdown += `## üìê Architecture Diagram\n\n`;
        markdown += `${mermaid}\n\n`;
        
        // Classes Details
        markdown += `## üèõÔ∏è Classes Details\n\n`;
        classes.forEach(cls => {
            markdown += `### ${cls.name}\n\n`;
            
            markdown += `**Methods (${cls.methods.declared.length}):**\n`;
            cls.methods.declared.forEach(method => {
                markdown += `- \`${method}()\`${method === 'constructor' ? ' üèóÔ∏è' : ''}\n`;
            });
            
            if (cls.properties.length > 0) {
                markdown += `\n**Properties (${cls.properties.length}):**\n`;
                cls.properties.forEach(prop => {
                    markdown += `- \`${prop}\`\n`;
                });
            }
            
            markdown += '\n';
        });
        
        return markdown;
    }
    
    static generateHTML(analysis, title = 'Architecture Analysis') {
        const markdown = this.generate(analysis, title);
        const mermaidHTML = MermaidVisualizer.generateHTML(analysis, title);
        
        return `
<!DOCTYPE html>
<html>
<head>
    <title>${title}</title>
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 40px;
            background: #f5f5f5;
        }
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        .metrics {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin-bottom: 30px;
        }
        .metric {
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
        }
        .mermaid-container {
            background: white;
            padding: 30px;
            border-radius: 8px;
            margin-bottom: 30px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .classes-container {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .class-card {
            border-left: 4px solid #667eea;
            padding: 15px;
            margin: 15px 0;
            background: #f8f9fa;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üèóÔ∏è ${title}</h1>
        <p>Generated by Insight Suite JS2UML</p>
    </div>
    
    <div class="metrics">
        <div class="metric">
            <div class="metric-value">${analysis.insights.totalClasses}</div>
            <div>Classes</div>
        </div>
        <div class="metric">
            <div class="metric-value">${analysis.insights.totalMethods}</div>
            <div>Methods</div>
        </div>
        <div class="metric">
            <div class="metric-value">${analysis.insights.qualityScore}%</div>
            <div>Quality</div>
        </div>
        <div class="metric">
            <div class="metric-value">${analysis.relationships.length}</div>
            <div>Relationships</div>
        </div>
    </div>
    
    <div class="mermaid-container">
        <h2>üìê Architecture Diagram</h2>
        ${MermaidVisualizer.generateHTML(analysis, title).split('<body>')[1].split('</body>')[0]}
    </div>
    
    <div class="classes-container">
        <h2>üèõÔ∏è Classes</h2>
        ${analysis.classes.map(cls => `
            <div class="class-card">
                <h3>${cls.name}</h3>
                <p><strong>Methods:</strong> ${cls.methods.declared.join(', ')}</p>
                ${cls.properties.length > 0 ? `<p><strong>Properties:</strong> ${cls.properties.join(', ')}</p>` : ''}
            </div>
        `).join('')}
    </div>
</body>
</html>`;
    }
}
