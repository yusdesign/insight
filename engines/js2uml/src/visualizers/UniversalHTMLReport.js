export class UniversalHTMLReport {
    static generate(analysis, title = 'Architecture Report') {
        const { classes, relationships, insights } = analysis;
        
        return `
<!DOCTYPE html>
<html>
<head>
    <title>${title}</title>
    <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 40px; 
            background: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .header { text-align: center; margin-bottom: 30px; }
        .metrics {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin-bottom: 30px;
        }
        .metric {
            background: #667eea;
            color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }
        .mermaid-container { 
            text-align: center;
            margin: 30px 0; 
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        .classes { margin-top: 30px; }
        .class-card {
            border-left: 4px solid #667eea;
            padding: 15px;
            margin: 10px 0;
            background: #f8f9fa;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üèóÔ∏è ${title}</h1>
            <p>Generated by Insight Suite JS2UML</p>
        </div>
        
        <div class="metrics">
            <div class="metric">
                <div style="font-size: 24px; font-weight: bold;">${insights.totalClasses}</div>
                <div>Classes</div>
            </div>
            <div class="metric">
                <div style="font-size: 24px; font-weight: bold;">${insights.totalMethods}</div>
                <div>Methods</div>
            </div>
            <div class="metric">
                <div style="font-size: 24px; font-weight: bold;">${insights.qualityScore}%</div>
                <div>Quality</div>
            </div>
            <div class="metric">
                <div style="font-size: 24px; font-weight: bold;">${relationships.length}</div>
                <div>Relationships</div>
            </div>
        </div>
        
        <div class="mermaid-container">
            <h2>üìê Architecture Diagram</h2>
            <pre class="mermaid">
${this.generateMermaid(analysis)}
            </pre>
        </div>
        
        <div class="classes">
            <h2>üèõÔ∏è Classes</h2>
            ${classes.map(cls => `
                <div class="class-card">
                    <h3>${cls.name}</h3>
                    <p><strong>Methods:</strong> ${cls.methods.declared.join(', ')}</p>
                    ${cls.properties.length > 0 ? 
                        '<p><strong>Properties:</strong> ' + cls.properties.join(', ') + '</p>' : ''}
                </div>
            `).join('')}
        </div>
    </div>

    <script>
        const config = {
            startOnLoad: true,
            theme: 'default',
            securityLevel: 'loose',
        };
        mermaid.initialize(config);
    </script>
</body>
</html>`;
    }
    
    static generateMermaid(analysis) {
        const { classes, relationships } = analysis;
        
        let mermaid = 'classDiagram\n';
        mermaid += '    direction LR\n\n';
        
        classes.forEach(cls => {
            mermaid += `    class ${cls.name} {\n`;
            
            // Add properties
            if (cls.properties.length > 0) {
                cls.properties.slice(0, 3).forEach(prop => {
                    mermaid += `        -${prop}\n`;
                });
            }
            
            // Add methods
            const methods = cls.methods.declared
                .filter(m => !['if', 'else', 'catch', 'try'].includes(m))
                .slice(0, 6);
                
            methods.forEach(method => {
                mermaid += `        +${method}()\n`;
            });
            
            mermaid += '    }\n';
        });
        
        // Add relationships
        relationships.slice(0, 8).forEach(rel => {
            if (rel.type === 'creation') {
                mermaid += `    ${rel.from} ..> ${rel.to} : creates\n`;
            } else if (rel.type === 'inheritance') {
                mermaid += `    ${rel.from} --|> ${rel.to}\n`;
            } else if (rel.type === 'usage') {
                mermaid += `    ${rel.from} --> ${rel.to}\n`;
            }
        });
        
        return mermaid;
    }
}
