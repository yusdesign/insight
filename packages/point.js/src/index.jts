import { PurposeIdentifier } from './core/identifier.js';
import { GoalAligner } from './core/aligner.js';

/**
 * Point.js - Find your code's true north
 * A library for understanding code purpose and goal alignment
 */
class PointJS {
  constructor(options = {}) {
    this.identifier = new PurposeIdentifier(options);
    this.aligner = new GoalAligner(options);
    this.version = '0.1.0';
  }

  /**
   * Identify the primary purpose of a code snippet
   * @param {string} code - The code to analyze
   * @param {object} context - Additional context for analysis
   * @returns {Promise<object>} Analysis results
   */
  async identify(code, context = {}) {
    return await this.identifier.analyze(code, context);
  }

  /**
   * Check if code aligns with a specific goal
   * @param {string} goal - The intended goal
   * @param {string} code - The code to check
   * @param {object} options - Analysis options
   * @returns {Promise<object>} Alignment results
   */
  async isAligned(goal, code, options = {}) {
    return await this.aligner.checkAlignment(goal, code, options);
  }

  /**
   * Suggest possible purposes for code
   * @param {string} code - The code to analyze
   * @param {Array} hints - Additional hints for analysis
   * @returns {Promise<object>} Purpose suggestions
   */
  async suggestPurpose(code, hints = []) {
    return await this.identifier.suggest(code, hints);
  }

  /**
   * Extract goals from code comments
   * @param {string} comments - Code comments to parse
   * @returns {Array} Extracted goals
   */
  extractGoals(comments) {
    return this.aligner.parseComments(comments);
  }

  /**
   * Measure how much code has drifted from requirements
   * @param {Array} requirements - Original requirements
   * @param {string} currentCode - Current implementation
   * @returns {Promise<object>} Drift analysis
   */
  async measureDrift(requirements, currentCode) {
    return await this.aligner.measureDrift(requirements, currentCode);
  }

  /**
   * Get library version
   * @returns {string} Version number
   */
  getVersion() {
    return this.version;
  }
}

// Export the main class
export default PointJS;

// Named exports for advanced usage
export { PurposeIdentifier, GoalAligner };

