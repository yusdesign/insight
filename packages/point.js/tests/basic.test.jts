import { PurposeIdentifier } from '../src/core/identifier.js';
import { GoalAligner } from '../src/core/aligner.js';

describe('PurposeIdentifier', () => {
  let identifier;

  beforeEach(() => {
    identifier = new PurposeIdentifier();
  });

  test('should identify data validation code', async () => {
    const code = `
      function validateEmail(email) {
        const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
        return regex.test(email);
      }
    `;

    const analysis = await identifier.analyze(code);
    expect(analysis.primaryPurpose.purpose).toBe('data-validation');
    expect(analysis.confidence).toBeGreaterThan(0.5);
  });

  test('should return empty analysis for empty code', async () => {
    const analysis = await identifier.analyze('');
    expect(analysis.purposes).toHaveLength(0);
    expect(analysis.primaryPurpose).toBeNull();
  });
});

describe('GoalAligner', () => {
  let aligner;

  beforeEach(() => {
    aligner = new GoalAligner();
  });

  test('should detect alignment between goal and code', async () => {
    const goal = "Validate user email format";
    const code = `
      function validateEmail(email) {
        const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
        return regex.test(email);
      }
    `;

    const result = await aligner.checkAlignment(goal, code);
    expect(result.aligned).toBe(true);
    expect(result.score).toBeGreaterThan(0.5);
  });

  test('should extract goals from comments', () => {
    const comments = "// TODO: Implement error handling";
    const goals = aligner.parseComments(comments);
    expect(goals).toHaveLength(1);
    expect(goals[0].type).toBe('todo');
  });
}

